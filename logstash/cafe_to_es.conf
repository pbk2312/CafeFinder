input {
  jdbc {
    # MariaDB 클라이언트 드라이버 JAR 파일 경로 (로컬 환경 경로로 수정)
    jdbc_driver_library => "/Users/park/projects/CafeFinder/logstash/jdbc/mariadb-java-client.jar"

    # MariaDB 드라이버 클래스
    jdbc_driver_class => "org.mariadb.jdbc.Driver"

    # MariaDB 연결 문자열 (로컬 DB 접속)
    jdbc_connection_string => "jdbc:mariadb://localhost:3306/CafeFinder"

    # MariaDB 접속 정보
    jdbc_user => "Yuhan"
    jdbc_password => "0525"

    # 카페 정보와 테마 정보를 조인하여 조회
    statement => "
      SELECT
          ci.code AS cafe_code,
          ci.name,
          ci.address,
          ci.district,
          ci.opening_hours,
          ci.phone_number,
          ci.image_url,
          ci.average_rating,
          ci.latitude,
          ci.longitude,
          COUNT(cr.id) AS review_count,
          GROUP_CONCAT(DISTINCT ct.theme) AS themes
      FROM cafe ci
      LEFT JOIN cafe_themes ct ON ci.code = ct.cafe_code
      LEFT JOIN cafe_review cr ON ci.code = cr.cafe_code
      GROUP BY ci.code, ci.name, ci.address, ci.district, ci.opening_hours, ci.phone_number, ci.image_url, ci.average_rating;
    "

    # 데이터 동기화를 위한 주기적 실행 (예: 매 분)
    schedule => "* * * * *"
  }
}

filter {
  # latitude와 longitude를 숫자로 변환 (데이터 타입 일관성 유지)
  mutate {
    convert => { "latitude" => "float" }
    convert => { "longitude" => "float" }
  }

  # location 필드를 geo_point 객체 형식으로 생성 (예: {"lat": 37.123, "lon": 127.456})
  if ([latitude] and [longitude]) {
    ruby {
      code => 'event.set("location", {"lat" => event.get("latitude"), "lon" => event.get("longitude")})'
    }
  }

  # themes 컬럼이 콤마로 연결된 문자열로 조회되므로, 배열로 변환
  if [themes] {
    mutate {
      split => { "themes" => "," }
    }
  }
}

output {
  elasticsearch {
    # Elasticsearch 호스트 설정 (로컬 실행 기준으로 변경)
    hosts => ["http://localhost:9200"]

    # 저장할 인덱스 이름 (없으면 자동 생성)
    index => "cafe"

    # 고유 키 (여기서는 CafeInfo의 cafe_code 필드를 사용)
    document_id => "%{cafe_code}"
  }

  # 결과를 콘솔에 출력하여 확인할 수 있음
  stdout { codec => json_lines }
}
