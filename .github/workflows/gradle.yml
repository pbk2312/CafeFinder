# docker-compose.yml (version 3.8)
version: '3.8'

services:
  app:
    image: your-dockerhub-id/cafefinder:latest
    container_name: cafefinder-app
    restart: always
    ports:
      - "8080:8080"

  nginx:
    image: nginx:stable-alpine
    container_name: cafefinder-nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      # 1) 정적 리소스 (CSS/JS/img)
      - ./src/main/resources/static:/usr/share/nginx/html/static:ro
      # 2) 복사된 HTML
      - ./nginx/html:/usr/share/nginx/html:ro
      # 3) Nginx 설정
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
```

```yaml
# .github/workflows/ci-cd.yml
name: CI/CD using GitHub Actions & Docker Compose

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  ci-cd:
    name: Build, Publish & Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode and write application.yml
        run: |
          echo "${{ secrets.ALL_SECRETS }}" | base64 -d > src/main/resources/application.yml

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Build Docker Image
        run: |
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/cafefinder:latest \
            --file Dockerfile .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cafefinder:latest

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            set -eux

            # Docker 데몬 시작
            sudo systemctl start docker

            # 코드가 없으면 클론, 있으면 pull
            if [ ! -d /home/ec2-user/cafe-finder ]; then
              git clone https://github.com/pbk2312/CafeFinder.git /home/ec2-user/cafe-finder
            else
              cd /home/ec2-user/cafe-finder
              git pull origin master
            fi

            cd /home/ec2-user/cafe-finder

            # 타임아웃 환경 변수 설정 (5분)
            export COMPOSE_HTTP_TIMEOUT=300
            export DOCKER_CLIENT_TIMEOUT=300

            # 최초(또는 전체 재시작) 시 전체 스택 기동
            if [ "$(sudo docker ps -q)" = "" ]; then
              sudo /usr/local/bin/docker-compose pull
              sudo /usr/local/bin/docker-compose up -d
            else
              # 이후 배포 시에는 infra 건드리지 않고 app만 재기동
              sudo /usr/local/bin/docker-compose pull app
              sudo /usr/local/bin/docker-compose up -d app
            fi

            # Logstash 별도 실행 (호스트 logstash.conf, logs, jdbc 드라이버 사용)
            sudo docker pull docker.elastic.co/logstash/logstash:7.10.0
            if sudo docker ps -a -q -f name=logstash | grep -q .; then
              sudo docker rm -f logstash
            fi
            sudo docker run -d \
              --name logstash \
              -v /home/ec2-user/logstash.conf:/usr/share/logstash/pipeline/logstash.conf \
              -v /home/ec2-user/logs:/var/log/logstash \
              -v /home/ec2-user/cafe-finder/logstash/jdbc:/usr/share/logstash/jdbc \
              docker.elastic.co/logstash/logstash:7.10.0

            # 불필요한 Docker 리소스 정리
            sudo docker system prune -f
